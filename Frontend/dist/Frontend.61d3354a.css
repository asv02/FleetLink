/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
    }
  }
}

@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    --color-gray-200: oklch(92.8% .006 264.531);
    --color-gray-600: oklch(44.6% .03 256.802);
    --color-gray-800: oklch(27.8% .033 256.848);
    --color-black: #000;
    --color-white: #fff;
    --spacing: .25rem;
    --container-md: 28rem;
    --text-sm: .875rem;
    --text-sm--line-height: calc(1.25 / .875);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --radius-xl: .75rem;
    --default-transition-duration: .15s;
    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}

@layer base {
  *, :after, :before, ::backdrop {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  html, :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }

  abbr:where([title]) {
    text-decoration: underline dotted;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }

  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }

  b, strong {
    font-weight: bolder;
  }

  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub, sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub {
    bottom: -.25em;
  }

  sup {
    top: -.5em;
  }

  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }

  :-moz-focusring {
    outline: auto;
  }

  progress {
    vertical-align: baseline;
  }

  summary {
    display: list-item;
  }

  ol, ul, menu {
    list-style: none;
  }

  img, svg, video, canvas, audio, iframe, embed, object {
    vertical-align: middle;
    display: block;
  }

  img, video {
    max-width: 100%;
    height: auto;
  }

  button, input, select, optgroup, textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }

  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  ::placeholder {
    opacity: 1;
  }

  @supports (not ((-webkit-appearance: -apple-pay-button))) or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentColor;

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }

  textarea {
    resize: vertical;
  }

  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }

  ::-webkit-datetime-edit {
    display: inline-flex;
  }

  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }

  ::-webkit-datetime-edit {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-year-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-month-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-day-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-hour-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-minute-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-second-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-millisecond-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }

  :-moz-ui-invalid {
    box-shadow: none;
  }

  button, input:where([type="button"], [type="reset"], [type="submit"]) {
    appearance: button;
  }

  ::file-selector-button {
    appearance: button;
  }

  ::-webkit-inner-spin-button {
    height: auto;
  }

  ::-webkit-outer-spin-button {
    height: auto;
  }

  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }

  :where(:root), :root:has(input.theme-controller[value="light"]:checked), [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% .006 285.885);
    --color-primary: oklch(45% .24 277.023);
    --color-primary-content: oklch(93% .034 272.788);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(25.33% .016 252.42);
      --color-base-200: oklch(23.26% .014 253.1);
      --color-base-300: oklch(21.15% .012 254.09);
      --color-base-content: oklch(97.807% .029 256.847);
      --color-primary: oklch(58% .233 277.117);
      --color-primary-content: oklch(96% .018 272.314);
      --color-secondary: oklch(65% .241 354.308);
      --color-secondary-content: oklch(94% .028 342.258);
      --color-accent: oklch(77% .152 181.912);
      --color-accent-content: oklch(38% .063 188.416);
      --color-neutral: oklch(14% .005 285.823);
      --color-neutral-content: oklch(92% .004 286.32);
      --color-info: oklch(74% .16 232.661);
      --color-info-content: oklch(29% .066 243.157);
      --color-success: oklch(76% .177 163.223);
      --color-success-content: oklch(37% .077 168.94);
      --color-warning: oklch(82% .189 84.429);
      --color-warning-content: oklch(41% .112 45.904);
      --color-error: oklch(71% .194 13.428);
      --color-error-content: oklch(27% .105 12.094);
      --radius-selector: .5rem;
      --radius-field: .25rem;
      --radius-box: .5rem;
      --size-selector: .25rem;
      --size-field: .25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }

  :root:has(input.theme-controller[value="light"]:checked), [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% .006 285.885);
    --color-primary: oklch(45% .24 277.023);
    --color-primary-content: oklch(93% .034 272.788);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  :root:has(input.theme-controller[value="dark"]:checked), [data-theme="dark"] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% .016 252.42);
    --color-base-200: oklch(23.26% .014 253.1);
    --color-base-300: oklch(21.15% .012 254.09);
    --color-base-content: oklch(97.807% .029 256.847);
    --color-primary: oklch(58% .233 277.117);
    --color-primary-content: oklch(96% .018 272.314);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }

  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }

  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
  }

  @property --radialprogress {
    syntax: "<percentage>"; inherits: true; initial-value: 0%;
  }

  :where(:root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked)) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);

    @supports (color: color-mix(in lab, red, red)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }

  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }

  :root {
    scrollbar-color: currentColor #0000;

    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}

@layer components;

@layer utilities {
  .diff {
    webkit-user-select: none;
    user-select: none;
    direction: ltr;
    grid-template-columns: auto 1fr;
    width: 100%;
    display: grid;
    position: relative;
    overflow: hidden;
    container-type: inline-size;

    &:focus-visible, &:has(.diff-item-1:focus-visible) {
      outline-style: var(--tw-outline-style);
      outline-offset: 1px;
      outline-width: 2px;
      outline-color: var(--color-base-content);
    }

    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-offset: 1px;
      outline-width: 2px;
      outline-color: var(--color-base-content);

      & .diff-resizer {
        min-width: 90cqi;
        max-width: 90cqi;
      }
    }

    &:has(.diff-item-2:focus-visible) {
      outline-style: var(--tw-outline-style);
      outline-offset: 1px;
      outline-width: 2px;

      & .diff-resizer {
        min-width: 10cqi;
        max-width: 10cqi;
      }
    }

    @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
      &:focus {
        & .diff-resizer {
          min-width: 10cqi;
          max-width: 10cqi;
        }
      }

      &:has(.diff-item-1:focus) {
        & .diff-resizer {
          min-width: 90cqi;
          max-width: 90cqi;
        }
      }
    }
  }

  .tab {
    cursor: pointer;
    appearance: none;
    text-align: center;
    webkit-user-select: none;
    user-select: none;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    display: inline-flex;
    position: relative;

    &:hover {
      @media (hover: hover) {
        color: var(--color-base-content);
      }
    }

    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-300);
    --tab-radius-ss: 0;
    --tab-radius-se: 0;
    --tab-radius-es: 0;
    --tab-radius-ee: 0;
    --tab-order: 0;
    --tab-radius-min: calc(.75rem - var(--border));
    order: var(--tab-order);
    height: var(--tab-height);
    border-color: #0000;
    padding-inline-start: var(--tab-p);
    padding-inline-end: var(--tab-p);
    font-size: .875rem;

    &:is(input[type="radio"]) {
      min-width: fit-content;

      &:after {
        content: attr(aria-label);
      }
    }

    &:is(label) {
      position: relative;

      & input {
        cursor: pointer;
        appearance: none;
        opacity: 0;
        position: absolute;
        inset: 0;
      }
    }

    &:checked, &:is(label:has(:checked)), &:is(.tab-active, [aria-selected="true"]) {
      & + .tab-content {
        height: calc(100% - var(--tab-height)  + var(--border));
        display: block;
      }
    }

    &:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
      color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }

    &:not(input):empty {
      cursor: default;
      flex-grow: 1;
    }

    &:focus {
      --tw-outline-style: none;
      outline-style: none;

      @media (forced-colors: active) {
        outline-offset: 2px;
        outline: 2px solid #0000;
      }
    }

    &:focus-visible, &:is(label:has(:checked:focus-visible)) {
      outline-offset: -5px;
      outline: 2px solid;
    }

    &[disabled] {
      pointer-events: none;
      opacity: .4;
    }
  }

  .menu {
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    flex-flow: column wrap;
    width: fit-content;
    padding: .5rem;
    font-size: .875rem;
    display: flex;

    & :where(li ul) {
      white-space: nowrap;
      margin-inline-start: 1rem;
      padding-inline-start: .5rem;
      position: relative;

      &:before {
        background-color: var(--color-base-content);
        opacity: .1;
        width: var(--border);
        content: "";
        inset-inline-start: 0;
        position: absolute;
        top: .75rem;
        bottom: .75rem;
      }
    }

    & :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
      display: none;
    }

    & :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)), & :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
      border-radius: var(--radius-field);
      text-align: start;
      text-wrap: balance;
      user-select: none;
      grid-auto-columns: minmax(auto, max-content) auto max-content;
      grid-auto-flow: column;
      align-content: flex-start;
      align-items: center;
      gap: .5rem;
      padding-block: .375rem;
      padding-inline: .75rem;
      transition-property: color, background-color, box-shadow;
      transition-duration: .2s;
      transition-timing-function: cubic-bezier(0, 0, .2, 1);
      display: grid;
    }

    & :where(li > details > summary) {
      --tw-outline-style: none;
      outline-style: none;

      @media (forced-colors: active) {
        outline-offset: 2px;
        outline: 2px solid #0000;
      }

      &::-webkit-details-marker {
        display: none;
      }
    }

    & :where(li > details > summary), & :where(li > .menu-dropdown-toggle) {
      &:after {
        content: "";
        transform-origin: 50%;
        pointer-events: none;
        justify-self: flex-end;
        width: .375rem;
        height: .375rem;
        transition-property: rotate, translate;
        transition-duration: .2s;
        display: block;
        translate: 0 -1px;
        rotate: -135deg;
        box-shadow: inset 2px 2px;
      }
    }

    & :where(li > details[open] > summary):after, & :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
      translate: 0 1px;
      rotate: 45deg;
    }

    & :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title)):not(.menu-active, :active, .btn) {
      &.menu-focus, &:focus-visible {
        cursor: pointer;
        background-color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }

        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }
      }
    }

    & :where(li:not(.menu-title, .disabled) > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover) {
      cursor: pointer;
      background-color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }

      --tw-outline-style: none;
      outline-style: none;

      @media (forced-colors: active) {
        outline-offset: 2px;
        outline: 2px solid #0000;
      }

      box-shadow: inset 0 1px oklch(0% 0 0 / .01), inset 0 -1px oklch(100% 0 0 / .01);
    }

    & :where(li:empty) {
      background-color: var(--color-base-content);
      opacity: .1;
      height: 1px;
      margin: .5rem 1rem;
    }

    & :where(li) {
      flex-flow: column wrap;
      flex-shrink: 0;
      align-items: stretch;
      display: flex;
      position: relative;

      & .badge {
        justify-self: flex-end;
      }

      & > :not(ul, .menu-title, details, .btn):active, & > :not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }

        color: var(--menu-active-fg);
        background-color: var(--menu-active-bg);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);

        &:not(&:active) {
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
        }
      }

      &.menu-disabled {
        pointer-events: none;
        color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }

    & .dropdown:focus-within {
      & .menu-dropdown-toggle:after {
        translate: 0 1px;
        rotate: 45deg;
      }
    }

    & .dropdown-content {
      margin-top: .5rem;
      padding: .5rem;

      &:before {
        display: none;
      }
    }
  }

  .btn {
    :where(&) {
      width: unset;
    }

    cursor: pointer;
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, .875rem);
    outline-color: var(--btn-color, var(--color-base-content));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 .5px oklch(100% 0 0 / calc(var(--depth) * .15));
    touch-action: manipulation;
    box-shadow: 0 .5px 0 .5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, .25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-wrap: nowrap;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    gap: .375rem;
    font-weight: 600;
    transition-property: color, background-color, border-color, box-shadow;
    transition-duration: .2s;
    transition-timing-function: cubic-bezier(0, 0, .2, 1);
    display: inline-flex;

    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }

    --btn-shadow: 0 3px 2px -2px var(--btn-bg), 0 4px 3px -2px var(--btn-bg);

    @supports (color: color-mix(in lab, red, red)) {
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000), 0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }

    --btn-noise: var(--fx-noise);

    .prose & {
      text-decoration-line: none;
    }

    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-base-200));

        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
      }
    }

    &:focus-visible {
      isolation: isolate;
      outline-width: 2px;
      outline-style: solid;
    }

    &:active:not(.btn-active) {
      --btn-bg: var(--btn-color, var(--color-base-200));
      translate: 0 .5px;

      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
      }

      --btn-border: var(--btn-color, var(--color-base-200));

      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }

      --btn-shadow: 0 0 0 0 oklch(0% 0 0 / 0), 0 0 0 0 oklch(0% 0 0 / 0);
    }

    &:is(:disabled, [disabled], .btn-disabled) {
      &:not(.btn-link, .btn-ghost) {
        background-color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }

        box-shadow: none;
      }

      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }

      @media (hover: hover) {
        &:hover {
          pointer-events: none;
          background-color: var(--color-neutral);

          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
          }

          --btn-border: #0000;
          --btn-fg: var(--color-base-content);

          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }

    &:is(input[type="checkbox"], input[type="radio"]) {
      appearance: none;

      &:after {
        content: attr(aria-label);
      }
    }

    &:where(input:checked:not(.filter .btn)) {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
      isolation: isolate;
    }
  }

  .loading {
    pointer-events: none;
    aspect-ratio: 1;
    vertical-align: middle;
    width: calc(var(--size-selector, .25rem) * 6);
    background-color: currentColor;
    display: inline-block;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    mask-position: center;
    mask-size: 100%;
    mask-repeat: no-repeat;
  }

  .visible {
    visibility: visible;
  }

  .list {
    flex-direction: column;
    font-size: .875rem;
    display: flex;

    & :where(.list-row) {
      --list-grid-cols: minmax(0, auto) 1fr;
      border-radius: var(--radius-box);
      word-break: break-word;
      grid-auto-flow: column;
      grid-template-columns: var(--list-grid-cols);
      gap: 1rem;
      padding: 1rem;
      display: grid;
      position: relative;

      &:has(.list-col-grow:first-child) {
        --list-grid-cols: 1fr;
      }

      &:has(.list-col-grow:nth-child(2)) {
        --list-grid-cols: minmax(0, auto) 1fr;
      }

      &:has(.list-col-grow:nth-child(3)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
      }

      &:has(.list-col-grow:nth-child(4)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
      }

      &:has(.list-col-grow:nth-child(5)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
      }

      &:has(.list-col-grow:nth-child(6)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
      }

      & :not(.list-col-wrap) {
        grid-row-start: 1;
      }
    }

    & > :not(:last-child) {
      &.list-row, & .list-row {
        &:after {
          content: "";
          border-bottom: var(--border) solid;
          inset-inline: var(--radius-box);
          border-color: var(--color-base-content);
          position: absolute;
          bottom: 0;

          @supports (color: color-mix(in lab, red, red)) {
            border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
          }
        }
      }
    }
  }

  .toggle {
    border: var(--border) solid currentColor;
    color: var(--input-color);
    cursor: pointer;
    appearance: none;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    --radius-selector-max: calc(var(--radius-selector)  + var(--radius-selector)  + var(--radius-selector));
    border-radius: calc(var(--radius-selector)  + min(var(--toggle-p), var(--radius-selector-max))  + min(var(--border), var(--radius-selector-max)));
    padding: var(--toggle-p);
    flex-shrink: 0;
    grid-template-columns: 0fr 1fr 1fr;
    place-content: center;
    display: inline-grid;
    position: relative;
    box-shadow: inset 0 1px;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }

    --input-color: var(--color-base-content);
    transition: color .3s, grid-template-columns .2s;

    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }

    --toggle-p: calc(var(--size) * .125);
    --size: calc(var(--size-selector, .25rem) * 6);
    width: calc((var(--size) * 2)  - (var(--border)  + var(--toggle-p)) * 2);
    height: var(--size);

    & > * {
      z-index: 1;
      cursor: pointer;
      appearance: none;
      background-color: #0000;
      border: none;
      grid-column: 2 / span 1;
      grid-row-start: 1;
      height: 100%;
      padding: .125rem;
      transition: opacity .2s, rotate .4s;

      &:focus {
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }
      }

      &:nth-child(2) {
        color: var(--color-base-100);
        rotate: none;
      }

      &:nth-child(3) {
        color: var(--color-base-100);
        opacity: 0;
        rotate: -15deg;
      }
    }

    &:has(:checked) {
      & > :nth-child(2) {
        opacity: 0;
        rotate: 15deg;
      }

      & > :nth-child(3) {
        opacity: 1;
        rotate: none;
      }
    }

    &:before {
      aspect-ratio: 1;
      border-radius: var(--radius-selector);
      --tw-content: "";
      content: var(--tw-content);
      height: 100%;
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor;
      background-color: currentColor;
      grid-row-start: 1;
      grid-column-start: 2;
      transition: background-color .1s, translate .2s, inset-inline-start .2s;
      position: relative;
      inset-inline-start: 0;
      translate: 0;

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
      }

      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }

    @media (forced-colors: active) {
      &:before {
        outline-style: var(--tw-outline-style);
        outline-offset: calc(1px * -1);
        outline-width: 1px;
      }
    }

    @media print {
      &:before {
        outline-offset: -1rem;
        outline: .25rem solid;
      }
    }

    &:focus-visible, &:has(:focus-visible) {
      outline-offset: 2px;
      outline: 2px solid;
    }

    &:checked, &[aria-checked="true"], &:has( > input:checked) {
      background-color: var(--color-base-100);
      --input-color: var(--color-base-content);
      grid-template-columns: 1fr 1fr 0fr;

      &:before {
        background-color: currentColor;
      }

      @starting-style {
        &:before {
          opacity: 0;
        }
      }
    }

    &:indeterminate {
      grid-template-columns: .5fr 1fr .5fr;
    }

    &:disabled {
      cursor: not-allowed;
      opacity: .3;

      &:before {
        border: var(--border) solid currentColor;
        background-color: #0000;
      }
    }
  }

  .input {
    cursor: text;
    border: var(--border) solid #0000;
    appearance: none;
    background-color: var(--color-base-100);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    touch-action: manipulation;
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-shrink: 1;
    align-items: center;
    gap: .5rem;
    padding-inline: .75rem;
    font-size: .875rem;
    display: inline-flex;
    position: relative;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    }

    --size: calc(var(--size-field, .25rem) * 10);
    --input-color: var(--color-base-content);

    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }

    &:where(input) {
      display: inline-flex;
    }

    & :where(input) {
      appearance: none;
      background-color: #0000;
      border: none;
      width: 100%;
      height: 100%;
      display: inline-flex;

      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }
      }
    }

    & :where(input[type="url"]), & :where(input[type="email"]) {
      direction: ltr;
    }

    & :where(input[type="date"]) {
      display: inline-block;
    }

    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }

      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
      z-index: 1;
    }

    &:has( > input[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }

      &::placeholder {
        color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }

      box-shadow: none;
    }

    &:has( > input[disabled]) > input[disabled] {
      cursor: not-allowed;
    }

    &::-webkit-date-and-time-value {
      text-align: inherit;
    }

    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: -.75rem;
        margin-inline-end: -.75rem;
      }
    }

    &::-webkit-calendar-picker-indicator {
      position: absolute;
      inset-inline-end: .75em;
    }
  }

  .table {
    border-radius: var(--radius-box);
    text-align: left;
    width: 100%;
    font-size: .875rem;
    position: relative;

    &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
      text-align: right;
    }

    & tr.row-hover {
      &, &:nth-child(2n) {
        &:hover {
          @media (hover: hover) {
            background-color: var(--color-base-200);
          }
        }
      }
    }

    & :where(th, td) {
      vertical-align: middle;
      padding-block: .75rem;
      padding-inline: 1rem;
    }

    & :where(thead, tfoot) {
      white-space: nowrap;
      color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }

      font-size: .875rem;
      font-weight: 600;
    }

    & :where(tfoot) {
      border-top: var(--border) solid var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
      }
    }

    & :where(.table-pin-rows thead tr) {
      z-index: 1;
      background-color: var(--color-base-100);
      position: sticky;
      top: 0;
    }

    & :where(.table-pin-rows tfoot tr) {
      z-index: 1;
      background-color: var(--color-base-100);
      position: sticky;
      bottom: 0;
    }

    & :where(.table-pin-cols tr th) {
      background-color: var(--color-base-100);
      position: sticky;
      left: 0;
      right: 0;
    }

    & :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
      }
    }
  }

  .range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, .25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: .25rem;
    --range-bg: currentColor;

    @supports (color: color-mix(in lab, red, red)) {
      --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    }

    cursor: pointer;
    vertical-align: middle;
    --radius-selector-max: calc(var(--radius-selector)  + var(--radius-selector)  + var(--radius-selector));
    border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
    width: clamp(3rem, 20rem, 100%);
    height: var(--range-thumb-size);
    background-color: #0000;
    border: none;
    overflow: hidden;

    [dir="rtl"] & {
      --range-dir: -1;
    }

    &:focus {
      outline: none;
    }

    &:focus-visible {
      outline-offset: 2px;
      outline: 2px solid;
    }

    &::-webkit-slider-runnable-track {
      background-color: var(--range-bg);
      border-radius: var(--radius-selector);
      width: 100%;
      height: calc(var(--range-thumb-size) * .5);
    }

    @media (forced-colors: active) {
      &::-webkit-slider-runnable-track {
        border: 1px solid;
      }

      &::-moz-range-track {
        border: 1px solid;
      }
    }

    &::-webkit-slider-thumb {
      box-sizing: border-box;
      border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
      border: var(--range-p) solid;
      appearance: none;
      webkit-appearance: none;
      color: var(--range-progress);
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
      background-color: currentColor;
      position: relative;
      top: 50%;
      transform: translateY(-50%);

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
      }
    }

    &::-moz-range-track {
      background-color: var(--range-bg);
      border-radius: var(--radius-selector);
      width: 100%;
      height: calc(var(--range-thumb-size) * .5);
    }

    &::-moz-range-thumb {
      box-sizing: border-box;
      border-radius: calc(var(--radius-selector)  + min(var(--range-p), var(--radius-selector-max)));
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
      border: var(--range-p) solid;
      color: var(--range-progress);
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
      background-color: currentColor;
      position: relative;
      top: 50%;

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem)  - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
      }
    }

    &:disabled {
      cursor: not-allowed;
      opacity: .3;
    }
  }

  .select {
    border: var(--border) solid #0000;
    appearance: none;
    background-color: var(--color-base-100);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    touch-action: manipulation;
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
    background-repeat: no-repeat;
    background-size: 4px 4px, 4px 4px;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-shrink: 1;
    align-items: center;
    gap: .375rem;
    padding-inline: 1rem 1.75rem;
    font-size: .875rem;
    display: inline-flex;
    position: relative;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    }

    border-color: var(--input-color);
    --input-color: var(--color-base-content);

    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }

    --size: calc(var(--size-field, .25rem) * 10);

    [dir="rtl"] & {
      background-position: 12px calc(1px + 50%), 16px calc(1px + 50%);
    }

    & select {
      appearance: none;
      background: inherit;
      border-radius: inherit;
      border-style: none;
      width: calc(100% + 2.75rem);
      height: calc(100% - 2px);
      margin-inline: -1rem -1.75rem;
      padding-inline: 1rem 1.75rem;

      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }
      }

      &:not(:last-child) {
        background-image: none;
        margin-inline-end: -1.375rem;
      }
    }

    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }

      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
      z-index: 1;
    }

    &:has( > select[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }

      &::placeholder {
        color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }

    &:has( > select[disabled]) > select[disabled] {
      cursor: not-allowed;
    }
  }

  .card {
    border-radius: var(--radius-box);
    outline-offset: 2px;
    outline: 0 solid #0000;
    flex-direction: column;
    transition: outline .2s ease-in-out;
    display: flex;
    position: relative;

    &:focus {
      --tw-outline-style: none;
      outline-style: none;

      @media (forced-colors: active) {
        outline-offset: 2px;
        outline: 2px solid #0000;
      }
    }

    &:focus-visible {
      outline-color: currentColor;
    }

    & :where(figure:first-child) {
      border-start-start-radius: inherit;
      border-start-end-radius: inherit;
      border-end-end-radius: unset;
      border-end-start-radius: unset;
      overflow: hidden;
    }

    & :where(figure:last-child) {
      border-start-start-radius: unset;
      border-start-end-radius: unset;
      border-end-end-radius: inherit;
      border-end-start-radius: inherit;
      overflow: hidden;
    }

    &:where(.card-border) {
      border: var(--border) solid var(--color-base-200);
    }

    &:where(.card-dash) {
      border: var(--border) dashed var(--color-base-200);
    }

    &.image-full {
      display: grid;

      & > * {
        grid-row-start: 1;
        grid-column-start: 1;
      }

      & > .card-body {
        color: var(--color-neutral-content);
        position: relative;
      }

      & :where(figure) {
        border-radius: inherit;
        overflow: hidden;
      }

      & > figure img {
        object-fit: cover;
        filter: brightness(28%);
        height: 100%;
      }
    }

    & figure {
      justify-content: center;
      align-items: center;
      display: flex;
    }

    &:has( > input:is(input[type="checkbox"], input[type="radio"])) {
      cursor: pointer;
      user-select: none;
    }

    &:has( > :checked) {
      outline: 2px solid;
    }
  }

  .swap {
    cursor: pointer;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    place-content: center;
    display: inline-grid;
    position: relative;

    & input {
      appearance: none;
      border: none;
    }

    & > * {
      grid-row-start: 1;
      grid-column-start: 1;
      transition-property: transform, rotate, opacity;
      transition-duration: .2s;
      transition-timing-function: cubic-bezier(0, 0, .2, 1);
    }

    & .swap-on, & .swap-indeterminate, & input:indeterminate ~ .swap-on {
      opacity: 0;
    }

    & input:is(:checked, :indeterminate) {
      & ~ .swap-off {
        opacity: 0;
      }
    }

    & input:checked ~ .swap-on, & input:indeterminate ~ .swap-indeterminate {
      opacity: 1;
      backface-visibility: visible;
    }
  }

  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));

    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }

    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 0 #0000 inset, 0 0 #0000;
    --size: calc(var(--size-selector, .25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    flex-shrink: 0;
    padding: .25rem;
    transition: background-color .2s, box-shadow .2s;
    display: inline-block;
    position: relative;

    &:before {
      --tw-content: "";
      content: var(--tw-content);
      opacity: 0;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      width: 100%;
      height: 100%;
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
      background-color: currentColor;
      font-size: 1rem;
      line-height: .75;
      transition: clip-path .3s .1s, opacity .1s .1s, rotate .3s .1s, translate .3s .1s;
      display: block;
      rotate: 45deg;
    }

    &:focus-visible {
      outline: 2px solid var(--input-color, currentColor);
      outline-offset: 2px;
    }

    &:checked, &[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * .1));

      &:before {
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
        opacity: 1;
      }

      @media (forced-colors: active) {
        &:before {
          --tw-content: "✔︎";
          clip-path: none;
          background-color: #0000;
          rotate: none;
        }
      }

      @media print {
        &:before {
          --tw-content: "✔︎";
          clip-path: none;
          background-color: #0000;
          rotate: none;
        }
      }
    }

    &:indeterminate {
      &:before {
        opacity: 1;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        translate: 0 -35%;
        rotate: none;
      }
    }

    &:disabled {
      cursor: not-allowed;
      opacity: .2;
    }
  }

  .radio {
    cursor: pointer;
    appearance: none;
    vertical-align: middle;
    border: var(--border) solid var(--input-color, currentColor);
    border-radius: 3.40282e38px;
    flex-shrink: 0;
    padding: .25rem;
    display: inline-block;
    position: relative;

    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
    }

    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset;
    --size: calc(var(--size-selector, .25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);

    &:before {
      --tw-content: "";
      content: var(--tw-content);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      border-radius: 3.40282e38px;
      width: 100%;
      height: 100%;
      display: block;
    }

    &:focus-visible {
      outline: 2px solid;
    }

    &:checked, &[aria-checked="true"] {
      background-color: var(--color-base-100);
      border-color: currentColor;
      animation: .2s ease-out radio;

      &:before {
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * .1));
        background-color: currentColor;
      }

      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-offset: calc(1px * -1);
          outline-width: 1px;
        }
      }

      @media print {
        &:before {
          outline-offset: -1rem;
          outline: .25rem solid;
        }
      }
    }

    &:disabled {
      cursor: not-allowed;
      opacity: .2;
    }
  }

  .progress {
    appearance: none;
    border-radius: var(--radius-box);
    background-color: currentColor;
    width: 100%;
    height: .5rem;
    position: relative;
    overflow: hidden;

    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, currentColor 20%, transparent);
    }

    color: var(--color-base-content);

    &:indeterminate {
      background-image: repeating-linear-gradient(90deg, currentColor -1% 10%, #0000 10% 90%);
      background-position-x: 15%;
      background-size: 200%;
      animation: 5s ease-in-out infinite progress;

      @supports ((-moz-appearance: none)) {
        &::-moz-progress-bar {
          background-color: #0000;
          background-image: repeating-linear-gradient(90deg, currentColor -1% 10%, #0000 10% 90%);
          background-position-x: 15%;
          background-size: 200%;
          animation: 5s ease-in-out infinite progress;
        }
      }
    }

    @supports ((-moz-appearance: none)) {
      &::-moz-progress-bar {
        border-radius: var(--radius-box);
        background-color: currentColor;
      }
    }

    @supports ((-webkit-appearance: none)) {
      &::-webkit-progress-bar {
        border-radius: var(--radius-box);
        background-color: #0000;
      }

      &::-webkit-progress-value {
        border-radius: var(--radius-box);
        background-color: currentColor;
      }
    }
  }

  .absolute {
    position: absolute;
  }

  .relative {
    position: relative;
  }

  .static {
    position: static;
  }

  .textarea {
    border: var(--border) solid #0000;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    vertical-align: middle;
    touch-action: manipulation;
    border-color: var(--input-color);
    width: clamp(3rem, 20rem, 100%);
    min-height: 5rem;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    flex-shrink: 1;
    padding-block: .5rem;
    padding-inline: .75rem;
    font-size: .875rem;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    }

    --input-color: var(--color-base-content);

    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }

    & textarea {
      appearance: none;
      background-color: #0000;
      border: none;

      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;

        @media (forced-colors: active) {
          outline-offset: 2px;
          outline: 2px solid #0000;
        }
      }
    }

    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);

      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }

      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
    }

    &:has( > textarea[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }

      &::placeholder {
        color: var(--color-base-content);

        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }

      box-shadow: none;
    }

    &:has( > textarea[disabled]) > textarea[disabled] {
      cursor: not-allowed;
    }
  }

  .stack {
    grid-template-rows: 3px 4px 1fr 4px 3px;
    grid-template-columns: 3px 4px 1fr 4px 3px;
    display: inline-grid;

    & > * {
      width: 100%;
      height: 100%;

      &:nth-child(n+2) {
        opacity: .7;
        width: 100%;
      }

      &:nth-child(2) {
        z-index: 2;
        opacity: .9;
      }

      &:first-child {
        z-index: 3;
        width: 100%;
      }
    }

    &, &.stack-bottom {
      & > * {
        grid-area: 3 / 3 / 6 / 4;

        &:nth-child(2) {
          grid-area: 2 / 2 / 5 / 5;
        }

        &:first-child {
          grid-area: 1 / 1 / 4 / 6;
        }
      }
    }

    &.stack-top {
      & > * {
        grid-area: 1 / 3 / 4 / 4;

        &:nth-child(2) {
          grid-area: 2 / 2 / 5 / 5;
        }

        &:first-child {
          grid-area: 3 / 1 / 6 / 6;
        }
      }
    }

    &.stack-start {
      & > * {
        grid-area: 3 / 1 / 4 / 4;

        &:nth-child(2) {
          grid-area: 2 / 2 / 5 / 5;
        }

        &:first-child {
          grid-area: 1 / 3 / 6 / 6;
        }
      }
    }

    &.stack-end {
      & > * {
        grid-area: 3 / 3 / 4 / 6;

        &:nth-child(2) {
          grid-area: 2 / 2 / 5 / 5;
        }

        &:first-child {
          grid-area: 1 / 1 / 6 / 4;
        }
      }
    }
  }

  .\!container {
    width: 100% !important;

    @media (width >= 40rem) {
      max-width: 40rem !important;
    }

    @media (width >= 48rem) {
      max-width: 48rem !important;
    }

    @media (width >= 64rem) {
      max-width: 64rem !important;
    }

    @media (width >= 80rem) {
      max-width: 80rem !important;
    }

    @media (width >= 96rem) {
      max-width: 96rem !important;
    }
  }

  .container {
    width: 100%;

    @media (width >= 40rem) {
      max-width: 40rem;
    }

    @media (width >= 48rem) {
      max-width: 48rem;
    }

    @media (width >= 64rem) {
      max-width: 64rem;
    }

    @media (width >= 80rem) {
      max-width: 80rem;
    }

    @media (width >= 96rem) {
      max-width: 96rem;
    }
  }

  .filter {
    flex-wrap: wrap;
    display: flex;

    & input[type="radio"] {
      width: auto;
    }

    & input {
      opacity: 1;
      transition: margin .1s, opacity .3s, padding .3s, border-width .1s;
      overflow: hidden;
      scale: 1;

      &:not(:last-child) {
        margin-inline-end: .25rem;
      }

      &.filter-reset {
        aspect-ratio: 1;

        &:after {
          content: "×";
        }
      }
    }

    &:not(:has(input:checked:not(.filter-reset))) {
      & .filter-reset, & input[type="reset"] {
        opacity: 0;
        border-width: 0;
        width: 0;
        margin-inline: 0;
        padding-inline: 0;
        scale: 0;
      }
    }

    &:has(input:checked:not(.filter-reset)) {
      & input:not(:checked, .filter-reset, input[type="reset"]) {
        opacity: 0;
        border-width: 0;
        width: 0;
        margin-inline: 0;
        padding-inline: 0;
        scale: 0;
      }
    }
  }

  .my-4 {
    margin-block: calc(var(--spacing) * 4);
  }

  .label {
    white-space: nowrap;
    color: currentColor;
    align-items: center;
    gap: .375rem;
    display: inline-flex;

    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }

    &:has(input) {
      cursor: pointer;
    }

    &:is(.input > *, .select > *) {
      white-space: nowrap;
      height: calc(100% - .5rem);
      font-size: inherit;
      align-items: center;
      padding-inline: .75rem;
      display: flex;

      &:first-child {
        border-inline-end: var(--border) solid currentColor;
        margin-inline: -.75rem .75rem;

        @supports (color: color-mix(in lab, red, red)) {
          border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
        }
      }

      &:last-child {
        border-inline-start: var(--border) solid currentColor;
        margin-inline: .75rem -.75rem;

        @supports (color: color-mix(in lab, red, red)) {
          border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
        }
      }
    }
  }

  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }

  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }

  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }

  .status {
    aspect-ratio: 1;
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
    width: .5rem;
    height: .5rem;
    display: inline-block;

    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }

    vertical-align: middle;
    color: #0000004d;
    background-position: center;
    background-repeat: no-repeat;

    @supports (color: color-mix(in lab, red, red)) {
      color: #0000004d;

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }

    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * .5)), #0000);
    box-shadow: 0 2px 3px -1px;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }

  .footer {
    grid-auto-flow: row;
    place-items: start;
    gap: 2.5rem 1rem;
    width: 100%;
    font-size: .875rem;
    line-height: 1.25rem;
    display: grid;

    & > * {
      place-items: start;
      gap: .5rem;
      display: grid;
    }

    &.footer-center {
      text-align: center;
      grid-auto-flow: column dense;
      place-items: center;

      & > * {
        place-items: center;
      }
    }
  }

  .card-body {
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, .875rem);
    flex-direction: column;
    flex: auto;
    gap: .5rem;
    display: flex;

    & :where(p) {
      flex-grow: 1;
    }
  }

  .alert {
    border-radius: var(--radius-box);
    color: var(--color-base-content);
    background-color: var(--alert-color, var(--color-base-200));
    text-align: start;
    border: var(--border) solid var(--color-base-200);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * .08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * .08));
    grid-template-columns: auto;
    grid-auto-flow: column;
    justify-content: start;
    place-items: center start;
    gap: 1rem;
    padding-block: .75rem;
    padding-inline: 1rem;
    font-size: .875rem;
    line-height: 1.25rem;
    display: grid;

    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * .08)) inset, 0 1px color-mix(in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * .08));
    }

    &:has(:nth-child(2)) {
      grid-template-columns: auto minmax(auto, 1fr);
    }

    &.alert-outline {
      color: var(--alert-color);
      box-shadow: none;
      background-color: #0000;
      background-image: none;
    }

    &.alert-dash {
      color: var(--alert-color);
      box-shadow: none;
      background-color: #0000;
      background-image: none;
      border-style: dashed;
    }

    &.alert-soft {
      color: var(--alert-color, var(--color-base-content));
      background: var(--alert-color, var(--color-base-content));

      @supports (color: color-mix(in lab, red, red)) {
        background: color-mix(in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100));
      }

      border-color: var(--alert-color, var(--color-base-content));

      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100));
      }

      box-shadow: none;
      background-image: none;
    }
  }

  .fieldset {
    grid-template-columns: 1fr;
    grid-auto-rows: max-content;
    gap: .375rem;
    padding-block: .25rem;
    font-size: .75rem;
    display: grid;
  }

  .card-actions {
    flex-wrap: wrap;
    align-items: flex-start;
    gap: .5rem;
    display: flex;
  }

  .card-title {
    font-size: var(--cardtitle-fs, 1.125rem);
    align-items: center;
    gap: .5rem;
    font-weight: 600;
    display: flex;
  }

  .join {
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    align-items: stretch;
    display: inline-flex;

    & :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-end-radius: var(--join-ee, 0);
      border-end-start-radius: var(--join-es, 0);

      & * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }

    & > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }

    & :first-child:not(:last-child) {
      & :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }

    & > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }

    & :last-child:not(:first-child) {
      & :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }

    & > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }

    & :only-child {
      & :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }

  .mask {
    vertical-align: middle;
    display: inline-block;
    mask-position: center;
    mask-size: contain;
    mask-repeat: no-repeat;
  }

  .block {
    display: block;
  }

  .flex {
    display: flex;
  }

  .grid {
    display: grid;
  }

  .hidden {
    display: none;
  }

  .inline {
    display: inline;
  }

  .inline-flex {
    display: inline-flex;
  }

  .table {
    display: table;
  }

  .min-h-screen {
    min-height: 100vh;
  }

  .w-96 {
    width: calc(var(--spacing) * 96);
  }

  .w-full {
    width: 100%;
  }

  .max-w-md {
    max-width: var(--container-md);
  }

  .transform {
    transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );
  }

  .link {
    cursor: pointer;
    text-decoration-line: underline;

    &:focus {
      --tw-outline-style: none;
      outline-style: none;

      @media (forced-colors: active) {
        outline-offset: 2px;
        outline: 2px solid #0000;
      }
    }

    &:focus-visible {
      outline-offset: 2px;
      outline: 2px solid;
    }
  }

  .resize {
    resize: both;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  .items-center {
    align-items: center;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }

  .space-y-1 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
    }
  }

  .space-y-3 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));
    }
  }

  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }

  .rounded-xl {
    border-radius: var(--radius-xl);
  }

  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }

  .alert-info {
    border-color: var(--color-info);
    color: var(--color-info-content);
    --alert-color: var(--color-info);
  }

  .border-gray-200 {
    border-color: var(--color-gray-200);
  }

  .bg-base-100 {
    background-color: var(--color-base-100);
  }

  .bg-base-200 {
    background-color: var(--color-base-200);
  }

  .bg-base-300 {
    background-color: var(--color-base-300);
  }

  .bg-white {
    background-color: var(--color-white);
  }

  .p-6 {
    padding: calc(var(--spacing) * 6);
  }

  .p-8 {
    padding: calc(var(--spacing) * 8);
  }

  .text-center {
    text-align: center;
  }

  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }

  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }

  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }

  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }

  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }

  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }

  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }

  .text-base-content {
    color: var(--color-base-content);
  }

  .text-gray-600 {
    color: var(--color-gray-600);
  }

  .text-gray-800 {
    color: var(--color-gray-800);
  }

  .text-primary {
    color: var(--color-primary);
  }

  .text-white {
    color: var(--color-white);
  }

  .lowercase {
    text-transform: lowercase;
  }

  .uppercase {
    text-transform: uppercase;
  }

  .italic {
    font-style: italic;
  }

  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a), 0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, #0000001a), 0 4px 6px -4px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, #0000001a), 0 8px 10px -6px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }

  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .filter {
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
}

@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}

@keyframes rating {
  0%, 40% {
    filter: brightness(1.05) contrast(1.05);
    scale: 1.1;
  }
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  100% {
    background-position: -50%;
  }
}

@keyframes dropdown {
  0% {
    opacity: 0;
  }
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes toast {
  0% {
    opacity: 0;
    scale: .9;
  }

  100% {
    opacity: 1;
    scale: 1;
  }
}

@property --tw-rotate-x {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-y {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-z {
  syntax: "*";
  inherits: false
}

@property --tw-skew-x {
  syntax: "*";
  inherits: false
}

@property --tw-skew-y {
  syntax: "*";
  inherits: false
}

@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-font-weight {
  syntax: "*";
  inherits: false
}

@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-ring-inset {
  syntax: "*";
  inherits: false
}

@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0;
}

@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}

@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-blur {
  syntax: "*";
  inherits: false
}

@property --tw-brightness {
  syntax: "*";
  inherits: false
}

@property --tw-contrast {
  syntax: "*";
  inherits: false
}

@property --tw-grayscale {
  syntax: "*";
  inherits: false
}

@property --tw-hue-rotate {
  syntax: "*";
  inherits: false
}

@property --tw-invert {
  syntax: "*";
  inherits: false
}

@property --tw-opacity {
  syntax: "*";
  inherits: false
}

@property --tw-saturate {
  syntax: "*";
  inherits: false
}

@property --tw-sepia {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false
}
/*# sourceMappingURL=Frontend.61d3354a.css.map */
